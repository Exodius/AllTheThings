<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Database</name>
    </assembly>
    <members>
        <member name="T:ATT.SavedVariableAttribute">
            <summary>
            The Saved Variable Attribute.
            Used to synchronize SavedVariable tables with database tables.
            </summary>
        </member>
        <member name="P:ATT.SavedVariableAttribute.Name">
            <summary>
            The name of the saved variable used to store this data.
            </summary>
        </member>
        <member name="M:ATT.SavedVariableAttribute.#ctor(System.String)">
            <summary>
            Create a saved variable attribute for a given public property.
            </summary>
            <param name="name">The name of the saved variable to associate with the field.</param>
        </member>
        <member name="T:ATT.SavedVariablePerCharacterAttribute">
            <summary>
            The Saved Variable Per Character Attribute.
            Used to synchronize PerCharacter SavedVariable tables with database tables.
            </summary>
        </member>
        <member name="P:ATT.SavedVariablePerCharacterAttribute.Name">
            <summary>
            The name of the saved variable used to store this data.
            </summary>
        </member>
        <member name="M:ATT.SavedVariablePerCharacterAttribute.#ctor(System.String)">
            <summary>
            Create a saved variable attribute for a given public property.
            </summary>
            <param name="name">The name of the saved variable to associate with the field.</param>
        </member>
        <member name="T:ATT.Collection">
            <summary>
            The Collection class.
            Contains all of the relevant collection data to agnostically represent a single account or individual character, the constructs by which make up the identity, for which this class is agnostic.
            </summary>
        </member>
        <member name="F:ATT.Collection.Achievements">
            <summary>
            All of the achievements collected by this account.
            NOTE: This uses ACHIEVEMENT IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Appearances">
            <summary>
            All of the appearances collected by this account.
            NOTE: This uses SOURCE IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Artifacts">
            <summary>
            All of the artifacts collected by this account.
            NOTE: This uses ARTIFACT IDs.
            TODO: Deprecate this?
            </summary>
        </member>
        <member name="F:ATT.Collection.Factions">
            <summary>
            All of the factions collected by this account.
            NOTE: This uses FACTION IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.FlightPaths">
            <summary>
            All of the flight paths collected by this account.
            NOTE: This uses FLIGHT PATH IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Followers">
            <summary>
            All of the followers collected by this account.
            NOTE: This uses FOLLOWER IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Illusions">
            <summary>
            All of the illusions collected by this account.
            NOTE: This uses ILLUSION IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Quests">
            <summary>
            All of the quests collected by this account.
            NOTE: This uses QUEST IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Spells">
            <summary>
            All of the spells collected by this account.
            NOTE: This uses SPELL IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Toys">
            <summary>
            All of the toys collected by this account.
            NOTE: This uses item IDs.
            </summary>
        </member>
        <member name="F:ATT.Collection.Titles">
            <summary>
            All of the titles collected by this account.
            NOTE: This uses TITLE IDs.
            </summary>
        </member>
        <member name="M:ATT.Collection.ExportToCSV(System.String)">
            <summary>
            Export the data in this Collection to a set of Comma-Separated Volume (CSV) files.
            This is traditionally used within Microsoft Excel.
            </summary>
            <param name="directory">The directory to write to.</param>
        </member>
        <member name="M:ATT.Collection.Export(System.Text.StringBuilder)">
            <summary>
            Export the collection data to the builder for use in CSV files.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:ATT.Collection.Load(System.IO.BinaryReader)">
            <summary>
            Load the collection data from the data reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ATT.Collection.Save(System.IO.BinaryWriter)">
            <summary>
            Save the collection data to the data writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:ATT.CollectionState">
            <summary>
            The collection state enumeration.
            Used to distinguish the state of a thing within your collection!
            </summary>
        </member>
        <member name="F:ATT.CollectionState.No">
            <summary>
            Not Collected.
            </summary>
        </member>
        <member name="F:ATT.CollectionState.Yes">
            <summary>
            Collected
            </summary>
        </member>
        <member name="F:ATT.CollectionState.Partial">
            <summary>
            Partially Collected from another Source.
            </summary>
        </member>
        <member name="T:ATT.Container">
            <summary>
            The Container class.
            Handles the conglomerate states of a specific object classification within a table of the Database.
            </summary>
        </member>
        <member name="F:ATT.Container._Dictionary">
            <summary>
            The internal dictionary used to hold the data securely.
            </summary>
        </member>
        <member name="E:ATT.Container.OnContainerChanged">
            <summary>
            Triggered when something in the container changes states.
            </summary>
        </member>
        <member name="F:ATT.Container.PartialTotal">
            <summary>
            The total amount of things partially collected within this container.
            </summary>
        </member>
        <member name="F:ATT.Container.Total">
            <summary>
            The total amount of things fully collected within this container.
            </summary>
        </member>
        <member name="M:ATT.Container.ExportToCSV(System.String)">
            <summary>
            Export the data in this Container to a Comma-Separated Volume. (CSV)
            This is traditionally used within Microsoft Excel.
            </summary>
            <param name="filename">The full file name to write to.</param>
        </member>
        <member name="M:ATT.Container.MergeWith(System.Collections.Generic.IDictionary{System.Int64,ATT.CollectionState})">
            <summary>
            Merge another container into this container.
            </summary>
            <param name="container">The other container to merge with.</param>
        </member>
        <member name="M:ATT.Container.Export(System.Text.StringBuilder)">
            <summary>
            Export the collection data to the builder for use in CSV files.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:ATT.Container.Load(System.IO.BinaryReader)">
            <summary>
            Load the collection data from the data reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ATT.Container.Save(System.IO.BinaryWriter)">
            <summary>
            Save the collection data to the data writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:ATT.Container.Item(System.Int64)">
            <summary>
            Get or Set the Collection State for a given entry in the container.
            </summary>
            <param name="key">The entry.</param>
            <returns>The collection state.</returns>
        </member>
        <member name="P:ATT.Container.Keys">
            <summary>
            Get a list of all of the active keys in the container.
            </summary>
        </member>
        <member name="P:ATT.Container.Values">
            <summary>
            Get a list of all of the active values in the container.
            </summary>
        </member>
        <member name="P:ATT.Container.Count">
            <summary>
            Get the total number of pairs stored in the container.
            </summary>
        </member>
        <member name="P:ATT.Container.IsReadOnly">
            <summary>
            Whether or not this container is read only.
            </summary>
        </member>
        <member name="M:ATT.Container.Add(System.Int64,ATT.CollectionState)">
            <summary>
            Attempt to add the value to the container.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ATT.Container.Add(System.Collections.Generic.KeyValuePair{System.Int64,ATT.CollectionState})">
            <summary>
            Attempt to add the item to the container.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ATT.Container.Clear">
            <summary>
            Clear the contents of this container.
            </summary>
        </member>
        <member name="M:ATT.Container.Contains(System.Collections.Generic.KeyValuePair{System.Int64,ATT.CollectionState})">
            <summary>
            Determine whether a given item exists in the container in its current pair.
            </summary>
            <param name="item">The item.</param>
            <returns>Whether or not the item exists in the container.</returns>
        </member>
        <member name="M:ATT.Container.ContainsKey(System.Int64)">
            <summary>
            Determine whether or not the key exists within the container.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether or not the key exists in the container.</returns>
        </member>
        <member name="M:ATT.Container.CopyTo(System.Collections.Generic.KeyValuePair{System.Int64,ATT.CollectionState}[],System.Int32)">
            <summary>
            Copy the contents of this container into the array at the given index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The index of the array to start inserting key value pairs.</param>
        </member>
        <member name="M:ATT.Container.GetEnumerator">
            <summary>
            Get the enumerator for which to loop upon.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ATT.Container.Remove(System.Int64)">
            <summary>
            Remove the given entry from the container.
            </summary>
            <param name="key">The key.</param>
            <returns>Whether or not the entry was removed successfully.</returns>
        </member>
        <member name="M:ATT.Container.Remove(System.Collections.Generic.KeyValuePair{System.Int64,ATT.CollectionState})">
            <summary>
            Remove the given item from the container.
            </summary>
            <param name="item">The item.</param>
            <returns>Whether or not the entry was removed successfully.</returns>
        </member>
        <member name="M:ATT.Container.TryGetValue(System.Int64,ATT.CollectionState@)">
            <summary>
            Attempt to acquire the current state of a given entry without violating index policy.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Whether or not a value was contained in the container for the given entry.</returns>
        </member>
        <member name="M:ATT.Container.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the container.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:ATT.Database">
            <summary>
            The AllTheThings Database class.
            Provides entry points for interacting with the statically loaded ATT Database for collectibles.
            </summary>
        </member>
        <member name="F:ATT.Database.ClassicWoWAccounts">
            <summary>
            All of the World of Warcraft Classic Accounts loaded in the ATT Database. (locally)
            </summary>
        </member>
        <member name="F:ATT.Database.RetailWoWAccounts">
            <summary>
            All of the World of Warcraft Accounts loaded in the ATT Database. (locally)
            </summary>
        </member>
        <member name="M:ATT.Database.#cctor">
            <summary>
            The class constructor.
            </summary>
        </member>
        <member name="M:ATT.Database.Initialize">
            <summary>
            Initialize the database.
            </summary>
        </member>
        <member name="P:ATT.Database.InstallationPathForClassicWoW">
            <summary>
            The installation path for Classic WoW.
            </summary>
        </member>
        <member name="P:ATT.Database.InstallationPathForRetailWoW">
            <summary>
            The installation path for Retail WoW.
            </summary>
        </member>
        <member name="P:ATT.Database.InstallationPathForWoW">
            <summary>
            The installation path for WoW.
            </summary>
        </member>
        <member name="M:ATT.Database.GetInstallationFolderPathForWoW">
            <summary>
            Get the Installation Folder Path for World of Warcraft from the Windows Registry.
            </summary>
            <returns>The Installation Folder Path for WoW.</returns>
        </member>
        <member name="M:ATT.Database.UpdateInstallationFolderPathForWoW">
            <summary>
            Update the Installation Folder Path for World of Warcraft from the Windows Registry.
            </summary>
        </member>
        <member name="M:ATT.Database.ExportToCSV(System.String)">
            <summary>
            Export the database to a set of Comma-Separated Volume (CSV) files.
            </summary>
            <param name="directory">The directory to write to.</param>
        </member>
        <member name="M:ATT.Database.SyncWithSavedVariables(System.String,System.Collections.Generic.Dictionary{System.String,ATT.WoWAccount})">
            <summary>
            Sync the database with the Saved Variables in the World of Warcraft Folder.
            </summary>
            <param name="root">The root folder of the installation.</param>
            <param name="accounts">The accounts currently stored for the environment.</param>
        </member>
        <member name="M:ATT.Database.SyncWithSavedVariables">
            <summary>
            Sync the database with the Saved Variables in the World of Warcraft Folder.
            </summary>
        </member>
        <member name="T:ATT.IBinaryDataFormatter">
            <summary>
            The Binary Data Formatter Interface.
            Provides generic function structuring interfaces with which to save and load binary data associated with a given class.
            </summary>
        </member>
        <member name="M:ATT.IBinaryDataFormatter.Export(System.Text.StringBuilder)">
            <summary>
            Export the collection data to the builder for use in CSV files.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:ATT.IBinaryDataFormatter.Load(System.IO.BinaryReader)">
            <summary>
            Load the collection data from the data reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ATT.IBinaryDataFormatter.Save(System.IO.BinaryWriter)">
            <summary>
            Save the collection data to the data writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:ATT.PropertyChanged`1">
            <summary>
            The property changed class. Handles a backing field and event for when the state of that variable changes.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="F:ATT.PropertyChanged`1._BackingField">
            <summary>
            The Backing Field to store the internal value.
            </summary>
        </member>
        <member name="F:ATT.PropertyChanged`1._Changed">
            <summary>
            Whether or not this property changed while paused.
            </summary>
        </member>
        <member name="F:ATT.PropertyChanged`1._Paused">
            <summary>
            Whether or not this property event handler is paused.
            </summary>
        </member>
        <member name="E:ATT.PropertyChanged`1.OnValueChanged">
            <summary>
            Triggered when the value changes state.
            </summary>
        </member>
        <member name="P:ATT.PropertyChanged`1.Value">
            <summary>
            The current value stored in the property.
            </summary>
        </member>
        <member name="M:ATT.PropertyChanged`1.#ctor">
            <summary>
            Contruct an empty Property with the default value.
            </summary>
        </member>
        <member name="M:ATT.PropertyChanged`1.#ctor(`0)">
            <summary>
            Contruct an empty Property with a specific default value.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:ATT.PropertyChanged`1.Paused">
            <summary>
            Whether or not the event handling associated with this property has been paused.
            </summary>
        </member>
        <member name="M:ATT.SavedVariables.GlobalLuaTableToJSON(NLua.LuaTable)">
            <summary>
            Convert the Lua Table to JSON.
            </summary>
            <param name="table">The table.</param>
            <returns>The MiniJSON compliant data table.</returns>
        </member>
        <member name="M:ATT.SavedVariables.LuaTableToJSON(NLua.LuaTable)">
            <summary>
            Convert the Lua Table to JSON.
            </summary>
            <param name="table">The table.</param>
            <returns>The MiniJSON compliant data table.</returns>
        </member>
        <member name="M:ATT.SavedVariables.ParseFile(System.String)">
            <summary>
            Parse and write back the Lua data to the file.
            </summary>
            <param name="filename">The name of the lua file to parse.</param>
            <returns>The data in a more readable format.</returns>
        </member>
        <member name="M:ATT.SavedVariables.Write(System.Object,System.Text.StringBuilder,System.Int32)">
            <summary>
            Write the object to the string builder.
            </summary>
            <param name="o">The object.</param>
            <param name="builder">The string builder.</param>
            <param name="depth">The depth of the object.</param>
        </member>
        <member name="M:ATT.SavedVariables.Write(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Text.StringBuilder,System.Int32)">
            <summary>
            Write the table to the string builder.
            </summary>
            <param name="table">The table.</param>
            <param name="builder">The string builder.</param>
            <param name="depth">The depth of the object.</param>
        </member>
        <member name="M:ATT.SavedVariables.Parse(System.IO.DirectoryInfo)">
            <summary>
            Parse the Saved Variables into a more usuable format.
            </summary>
            <param name="root">The Saved Variables Root Folder for the Account.</param>
            <returns>The less raw data.</returns>
        </member>
        <member name="T:ATT.WoWCharacter">
            <summary>
            Represents a player's individual WoW Character and its associated collection.
            </summary>
        </member>
        <member name="P:ATT.WoWCharacter.GUID">
            <summary>
            The GUID that identifies this character.
            GOTCHA: This identifier changes when a player Server Transfers.
            </summary>
        </member>
        <member name="P:ATT.WoWCharacter.Name">
            <summary>
            The character's name.
            </summary>
        </member>
        <member name="P:ATT.WoWCharacter.Realm">
            <summary>
            The Realm where this character resides.
            </summary>
        </member>
        <member name="P:ATT.WoWCharacter.RealmName">
            <summary>
            The fully qualified realm name that represents this character.
            </summary>
        </member>
        <member name="M:ATT.WoWCharacter.ExportToCSV(System.String)">
            <summary>
            Export the data in this Collection to a set of Comma-Separated Volume (CSV) files.
            This is traditionally used within Microsoft Excel.
            </summary>
            <param name="directory">The directory to write to.</param>
        </member>
        <member name="T:ATT.WoWAccount">
            <summary>
            Represents a player's individual WoW Account and its combined collection.
            </summary>
        </member>
        <member name="P:ATT.WoWAccount.AccountName">
            <summary>
            The Account Name associated with this account.
            </summary>
        </member>
        <member name="F:ATT.WoWAccount.Characters">
            <summary>
            
            </summary>
        </member>
        <member name="M:ATT.WoWAccount.#ctor(System.String)">
            <summary>
            Create an instance of the WoW Account class with an associated name.
            </summary>
            <param name="accountName">The name of the account.</param>
        </member>
        <member name="M:ATT.WoWAccount.ExportToCSV(System.String)">
            <summary>
            Export the data in this Collection to a set of Comma-Separated Volume (CSV) files.
            This is traditionally used within Microsoft Excel.
            </summary>
            <param name="directory">The directory to write to.</param>
        </member>
        <member name="M:ATT.WoWAccount.Import(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Import data from the saved variables associated with the account.
            </summary>
            <param name="savedVariables">The saved variables.</param>
        </member>
        <member name="M:ATT.WoWAccount.Load(System.String)">
            <summary>
            Load the data from the local account data files.
            </summary>
            <param name="path">The root path for ATT Data.</param>
        </member>
        <member name="M:ATT.WoWAccount.Save(System.String)">
            <summary>
            Save the data to the local account data files.
            </summary>
            <param name="path">The root path for ATT Data.</param>
        </member>
        <member name="M:ATT.WoWAccount.ToContainerData(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Convert a raw data object into the format expected by the importer.
            </summary>
            <param name="data">The raw data.</param>
            <returns>The collection data.</returns>
        </member>
        <member name="T:MiniJSON.Json">
             <summary>
             This class encodes and decodes JSON strings.
             Spec. details, see http://www.json.org/
            
             JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.
             All numbers are parsed to doubles.
             </summary>
        </member>
        <member name="M:MiniJSON.Json.Deserialize(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false</returns>
        </member>
        <member name="M:MiniJSON.Json.Serialize(System.Object)">
            <summary>
            Converts a IDictionary / IList object or a simple type (string, int, etc.) into a JSON string
            </summary>
            <param name="json">A Dictionary&lt;string, object&gt; / List&lt;object&gt;</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
    </members>
</doc>
